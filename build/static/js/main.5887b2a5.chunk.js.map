{"version":3,"sources":["FarewellCards.js","FarewellMessageEditBox.js","App.js","serviceWorker.js","index.js"],"names":["FarewellCards","props","cards","messages","map","message","idx","Col","key","Card","style","width","Body","Title","author","Text","farewellMessage","Container","Row","FarewellMessageEditBox","Form","onSubmit","e","id","event","console","log","target","elements","formBasicText","value","preventDefault","stopPropagation","fetch","method","headers","body","JSON","stringify","_id","then","response","json","data","document","location","href","catch","error","Group","as","controlId","sm","Label","Control","type","placeholder","Button","App","useState","setMessages","setId","useEffect","values","queryString","parse","window","search","resp","conditionalEditBox","className","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yTAgCeA,EAzBO,SAACC,GACnB,IAAMC,EAAQD,EAAME,SAASC,KAAI,SAACC,EAASC,GACvC,OACI,kBAACC,EAAA,EAAD,CAAKC,IAAKF,GACN,kBAACG,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UAClB,kBAACF,EAAA,EAAKG,KAAN,KACI,kBAACH,EAAA,EAAKI,MAAN,KAAY,2BAAIR,EAAQS,SACxB,kBAACL,EAAA,EAAKM,KAAN,KACKV,EAAQW,uBAQjC,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACKhB,K,eCwBFiB,EApBgB,SAAClB,GAC5B,OACI,kBAACmB,EAAA,EAAD,CAAMC,SAAU,SAACC,GAzBL,IAACC,EAAIC,EAAJD,EAyBwBtB,EAAMsB,GAzB1BC,EAyB8BF,EAxBnDG,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,EAAMG,OAAOC,SAASC,cAAcC,OAChDN,EAAMO,iBACNP,EAAMQ,kBACNC,MAAM,mDACF,CACIC,OAAQ,MACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAEC,IAAKhB,EAAIP,gBAAiBQ,EAAMG,OAAOC,SAASC,cAAcC,UAExFU,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACHlB,QAAQC,IAAI,WAAYiB,GACxBC,SAASC,SAASC,KAAK,OAE1BC,OAAM,SAACC,GACJvB,QAAQuB,MAAM,SAAUA,QAOxB,kBAAC5B,EAAA,EAAK6B,MAAN,CAAYC,GAAIhC,IAAKiC,UAAU,iBAC3B,kBAAC5C,EAAA,EAAD,CAAK6C,GAAI,GACL,kBAAChC,EAAA,EAAKiC,MAAN,sCAEJ,kBAAC9C,EAAA,EAAD,CAAK6C,GAAI,GACL,kBAAChC,EAAA,EAAKkC,QAAN,CAAcC,KAAK,OAAOC,YAAY,2BAE1C,kBAACjD,EAAA,EAAD,CAAK6C,GAAI,GACL,kBAACK,EAAA,EAAD,CAAQF,KAAK,UAAb,cCHLG,EA3BH,SAACzD,GAAW,IAAD,EACW0D,mBAAS,IADpB,mBACdxD,EADc,KACJyD,EADI,OAEDD,mBAAS,MAFR,mBAEdpC,EAFc,KAEVsC,EAFU,KAIrBC,qBAAU,WACR,IAAMC,EAASC,IAAYC,MAAMC,OAAOrB,SAASsB,QAC7CJ,EAAOxC,IACTsC,EAAME,EAAOxC,IAGfU,MAAM,qDACHO,MAAK,SAAA4B,GAAI,OAAIA,EAAK1B,UAClBF,MAAK,SAAA4B,GACJR,EAAYQ,QAEf,IAEH,IAAMC,EAAsB9C,GAAM,kBAAC,EAAD,CAAwBA,GAAIA,IAC9D,OACE,yBAAK+C,UAAU,OACb,sFACCD,EACD,kBAAC,EAAD,CAAelE,SAAUA,MCrBXoE,QACW,cAA7BL,OAAOrB,SAAS2B,UAEe,UAA7BN,OAAOrB,SAAS2B,UAEhBN,OAAOrB,SAAS2B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS/B,SAASgC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.5887b2a5.chunk.js","sourcesContent":["import React from 'react'\n\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\n\nconst FarewellCards = (props) => {\n    const cards = props.messages.map((message, idx) => {\n        return (\n            <Col key={idx}>\n                <Card style={{ width: '18rem' }}>\n                    <Card.Body>\n                        <Card.Title><b>{message.author}</b></Card.Title>\n                        <Card.Text>\n                            {message.farewellMessage}\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n            </Col>\n        )\n    })\n\n    return (\n        <Container>\n            <Row>\n                {cards}\n            </Row>\n        </Container>\n    )\n}\n\nexport default FarewellCards\n","import React from 'react'\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nconst handleClick = (id, event) => {\n    console.log(id)\n    console.log(event.target.elements.formBasicText.value)\n    event.preventDefault()\n    event.stopPropagation()\n    fetch('https://cory-farewell-card.herokuapp.com/message',\n        {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ _id: id, farewellMessage: event.target.elements.formBasicText.value }),\n        })\n        .then((response) => response.json())\n        .then((data) => {\n            console.log('Success:', data);\n            document.location.href='/'\n        })\n        .catch((error) => {\n            console.error('Error:', error);\n        })\n}\n\nconst FarewellMessageEditBox = (props) => {\n    return (\n        <Form onSubmit={(e) => { handleClick(props.id, e) }}>\n            <Form.Group as={Row} controlId='formBasicText'>\n                <Col sm={3}>\n                    <Form.Label>Your Farewell Wishes To Cory</Form.Label>\n                </Col>\n                <Col sm={6}>\n                    <Form.Control type=\"text\" placeholder=\"Enter your wish here.\"></Form.Control>\n                </Col>\n                <Col sm={3}>\n                    <Button type='submit'>\n                        Submit\n                        </Button>\n                </Col>\n            </Form.Group>\n        </Form>\n    )\n}\n\nexport default FarewellMessageEditBox\n","import React, { useState, useEffect } from 'react';\n\nimport queryString from 'query-string'\n\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport FarewellCards from './FarewellCards'\nimport FarewellMessageEditBox from './FarewellMessageEditBox'\n\nconst App = (props) => {\n  const [messages, setMessages] = useState([])\n  const [id, setId] = useState(null)\n\n  useEffect(() => {\n    const values = queryString.parse(window.location.search)\n    if (values.id) {\n      setId(values.id)\n    }\n\n    fetch('https://cory-farewell-card.herokuapp.com/messages')\n      .then(resp => resp.json())\n      .then(resp => {\n        setMessages(resp)\n      })\n  }, [])\n\n  const conditionalEditBox = (id && <FarewellMessageEditBox id={id} />)\n  return (\n    <div className=\"App\">\n      <h1>Farewell Cory! Best wishes for your new life out west!</h1>\n      {conditionalEditBox}\n      <FarewellCards messages={messages} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}